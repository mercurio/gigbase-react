--
-- PostgreSQL database dump
--

-- Dumped from database version 10.6 (Ubuntu 10.6-1.pgdg14.04+1)
-- Dumped by pg_dump version 10.6 (Ubuntu 10.6-1.pgdg16.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: hdb_catalog; Type: SCHEMA; Schema: -; Owner: segmipyqnzfzlq
--

CREATE SCHEMA hdb_catalog;


ALTER SCHEMA hdb_catalog OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_views; Type: SCHEMA; Schema: -; Owner: segmipyqnzfzlq
--

CREATE SCHEMA hdb_views;


ALTER SCHEMA hdb_views OWNER TO segmipyqnzfzlq;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: first_agg(anyelement, anyelement); Type: FUNCTION; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE FUNCTION hdb_catalog.first_agg(anyelement, anyelement) RETURNS anyelement
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
       SELECT $1;
$_$;


ALTER FUNCTION hdb_catalog.first_agg(anyelement, anyelement) OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_table_oid_check(); Type: FUNCTION; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE FUNCTION hdb_catalog.hdb_table_oid_check() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  BEGIN
    IF (EXISTS (SELECT 1 FROM information_schema.tables st WHERE st.table_schema = NEW.table_schema AND st.table_name = NEW.table_name)) THEN
      return NEW;
    ELSE
      RAISE foreign_key_violation using message = 'table_schema, table_name not in information_schema.tables';
      return NULL;
    END IF;
  END;
$$;


ALTER FUNCTION hdb_catalog.hdb_table_oid_check() OWNER TO segmipyqnzfzlq;

--
-- Name: inject_table_defaults(text, text, text, text); Type: FUNCTION; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE FUNCTION hdb_catalog.inject_table_defaults(view_schema text, view_name text, tab_schema text, tab_name text) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
        r RECORD;
    BEGIN
      FOR r IN SELECT column_name, column_default FROM information_schema.columns WHERE table_schema = tab_schema AND table_name = tab_name AND column_default IS NOT NULL LOOP
          EXECUTE format('ALTER VIEW %I.%I ALTER COLUMN %I SET DEFAULT %s;', view_schema, view_name, r.column_name, r.column_default);
      END LOOP;
    END;
$$;


ALTER FUNCTION hdb_catalog.inject_table_defaults(view_schema text, view_name text, tab_schema text, tab_name text) OWNER TO segmipyqnzfzlq;

--
-- Name: last_agg(anyelement, anyelement); Type: FUNCTION; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE FUNCTION hdb_catalog.last_agg(anyelement, anyelement) RETURNS anyelement
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
        SELECT $2;
$_$;


ALTER FUNCTION hdb_catalog.last_agg(anyelement, anyelement) OWNER TO segmipyqnzfzlq;

--
-- Name: first_agg(anyelement, anyelement); Type: FUNCTION; Schema: public; Owner: segmipyqnzfzlq
--

CREATE FUNCTION public.first_agg(anyelement, anyelement) RETURNS anyelement
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
        SELECT $1;
$_$;


ALTER FUNCTION public.first_agg(anyelement, anyelement) OWNER TO segmipyqnzfzlq;

--
-- Name: truncate_tables(character varying); Type: FUNCTION; Schema: public; Owner: segmipyqnzfzlq
--

CREATE FUNCTION public.truncate_tables(username character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    statements CURSOR FOR
        SELECT tablename FROM pg_tables
        WHERE tableowner = username AND schemaname = 'public';
BEGIN
    FOR stmt IN statements LOOP
        EXECUTE 'TRUNCATE TABLE ' || quote_ident(stmt.tablename) || ' CASCADE;';
    END LOOP;
END;
$$;


ALTER FUNCTION public.truncate_tables(username character varying) OWNER TO segmipyqnzfzlq;

--
-- Name: first(anyelement); Type: AGGREGATE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE AGGREGATE hdb_catalog.first(anyelement) (
    SFUNC = hdb_catalog.first_agg,
    STYPE = anyelement
);


ALTER AGGREGATE hdb_catalog.first(anyelement) OWNER TO segmipyqnzfzlq;

--
-- Name: last(anyelement); Type: AGGREGATE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE AGGREGATE hdb_catalog.last(anyelement) (
    SFUNC = hdb_catalog.last_agg,
    STYPE = anyelement
);


ALTER AGGREGATE hdb_catalog.last(anyelement) OWNER TO segmipyqnzfzlq;

--
-- Name: first(anyelement); Type: AGGREGATE; Schema: public; Owner: segmipyqnzfzlq
--

CREATE AGGREGATE public.first(anyelement) (
    SFUNC = public.first_agg,
    STYPE = anyelement
);


ALTER AGGREGATE public.first(anyelement) OWNER TO segmipyqnzfzlq;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: event_invocation_logs; Type: TABLE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE TABLE hdb_catalog.event_invocation_logs (
    id text DEFAULT public.gen_random_uuid() NOT NULL,
    event_id text,
    status integer,
    request json,
    response json,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE hdb_catalog.event_invocation_logs OWNER TO segmipyqnzfzlq;

--
-- Name: event_log; Type: TABLE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE TABLE hdb_catalog.event_log (
    id text DEFAULT public.gen_random_uuid() NOT NULL,
    schema_name text NOT NULL,
    table_name text NOT NULL,
    trigger_id text NOT NULL,
    trigger_name text NOT NULL,
    payload jsonb NOT NULL,
    delivered boolean DEFAULT false NOT NULL,
    error boolean DEFAULT false NOT NULL,
    tries integer DEFAULT 0 NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    locked boolean DEFAULT false NOT NULL,
    next_retry_at timestamp without time zone
);


ALTER TABLE hdb_catalog.event_log OWNER TO segmipyqnzfzlq;

--
-- Name: event_triggers; Type: TABLE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE TABLE hdb_catalog.event_triggers (
    id text DEFAULT public.gen_random_uuid() NOT NULL,
    name text,
    type text NOT NULL,
    schema_name text NOT NULL,
    table_name text NOT NULL,
    comment text,
    configuration json
);


ALTER TABLE hdb_catalog.event_triggers OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_check_constraint; Type: VIEW; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE VIEW hdb_catalog.hdb_check_constraint AS
 SELECT (n.nspname)::text AS table_schema,
    (ct.relname)::text AS table_name,
    (r.conname)::text AS constraint_name,
    pg_get_constraintdef(r.oid, true) AS "check"
   FROM ((pg_constraint r
     JOIN pg_class ct ON ((r.conrelid = ct.oid)))
     JOIN pg_namespace n ON ((ct.relnamespace = n.oid)))
  WHERE (r.contype = 'c'::"char");


ALTER TABLE hdb_catalog.hdb_check_constraint OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_foreign_key_constraint; Type: VIEW; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE VIEW hdb_catalog.hdb_foreign_key_constraint AS
 SELECT (q.table_schema)::text AS table_schema,
    (q.table_name)::text AS table_name,
    (q.constraint_name)::text AS constraint_name,
    (min(q.constraint_oid))::integer AS constraint_oid,
    min((q.ref_table_table_schema)::text) AS ref_table_table_schema,
    min((q.ref_table)::text) AS ref_table,
    json_object_agg(ac.attname, afc.attname) AS column_mapping,
    min((q.confupdtype)::text) AS on_update,
    min((q.confdeltype)::text) AS on_delete
   FROM ((( SELECT ctn.nspname AS table_schema,
            ct.relname AS table_name,
            r.conrelid AS table_id,
            r.conname AS constraint_name,
            r.oid AS constraint_oid,
            cftn.nspname AS ref_table_table_schema,
            cft.relname AS ref_table,
            r.confrelid AS ref_table_id,
            r.confupdtype,
            r.confdeltype,
            unnest(r.conkey) AS column_id,
            unnest(r.confkey) AS ref_column_id
           FROM ((((pg_constraint r
             JOIN pg_class ct ON ((r.conrelid = ct.oid)))
             JOIN pg_namespace ctn ON ((ct.relnamespace = ctn.oid)))
             JOIN pg_class cft ON ((r.confrelid = cft.oid)))
             JOIN pg_namespace cftn ON ((cft.relnamespace = cftn.oid)))
          WHERE (r.contype = 'f'::"char")) q
     JOIN pg_attribute ac ON (((q.column_id = ac.attnum) AND (q.table_id = ac.attrelid))))
     JOIN pg_attribute afc ON (((q.ref_column_id = afc.attnum) AND (q.ref_table_id = afc.attrelid))))
  GROUP BY q.table_schema, q.table_name, q.constraint_name;


ALTER TABLE hdb_catalog.hdb_foreign_key_constraint OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_permission; Type: TABLE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE TABLE hdb_catalog.hdb_permission (
    table_schema text NOT NULL,
    table_name text NOT NULL,
    role_name text NOT NULL,
    perm_type text NOT NULL,
    perm_def jsonb NOT NULL,
    comment text,
    is_system_defined boolean DEFAULT false,
    CONSTRAINT hdb_permission_perm_type_check CHECK ((perm_type = ANY (ARRAY['insert'::text, 'select'::text, 'update'::text, 'delete'::text])))
);


ALTER TABLE hdb_catalog.hdb_permission OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_permission_agg; Type: VIEW; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE VIEW hdb_catalog.hdb_permission_agg AS
 SELECT hdb_permission.table_schema,
    hdb_permission.table_name,
    hdb_permission.role_name,
    json_object_agg(hdb_permission.perm_type, hdb_permission.perm_def) AS permissions
   FROM hdb_catalog.hdb_permission
  GROUP BY hdb_permission.table_schema, hdb_permission.table_name, hdb_permission.role_name;


ALTER TABLE hdb_catalog.hdb_permission_agg OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_primary_key; Type: VIEW; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE VIEW hdb_catalog.hdb_primary_key AS
 SELECT tc.table_schema,
    tc.table_name,
    tc.constraint_name,
    json_agg(ccu.column_name) AS columns
   FROM (information_schema.table_constraints tc
     JOIN information_schema.constraint_column_usage ccu ON (((tc.constraint_name)::text = (ccu.constraint_name)::text)))
  WHERE ((tc.constraint_type)::text = 'PRIMARY KEY'::text)
  GROUP BY tc.table_schema, tc.table_name, tc.constraint_name;


ALTER TABLE hdb_catalog.hdb_primary_key OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_query_template; Type: TABLE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE TABLE hdb_catalog.hdb_query_template (
    template_name text NOT NULL,
    template_defn jsonb NOT NULL,
    comment text,
    is_system_defined boolean DEFAULT false
);


ALTER TABLE hdb_catalog.hdb_query_template OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_relationship; Type: TABLE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE TABLE hdb_catalog.hdb_relationship (
    table_schema text NOT NULL,
    table_name text NOT NULL,
    rel_name text NOT NULL,
    rel_type text,
    rel_def jsonb NOT NULL,
    comment text,
    is_system_defined boolean DEFAULT false,
    CONSTRAINT hdb_relationship_rel_type_check CHECK ((rel_type = ANY (ARRAY['object'::text, 'array'::text])))
);


ALTER TABLE hdb_catalog.hdb_relationship OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_table; Type: TABLE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE TABLE hdb_catalog.hdb_table (
    table_schema text NOT NULL,
    table_name text NOT NULL,
    is_system_defined boolean DEFAULT false
);


ALTER TABLE hdb_catalog.hdb_table OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_unique_constraint; Type: VIEW; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE VIEW hdb_catalog.hdb_unique_constraint AS
 SELECT tc.table_name,
    tc.constraint_schema AS table_schema,
    tc.constraint_name,
    json_agg(kcu.column_name) AS columns
   FROM (information_schema.table_constraints tc
     JOIN information_schema.key_column_usage kcu USING (constraint_schema, constraint_name))
  WHERE ((tc.constraint_type)::text = 'UNIQUE'::text)
  GROUP BY tc.table_name, tc.constraint_schema, tc.constraint_name;


ALTER TABLE hdb_catalog.hdb_unique_constraint OWNER TO segmipyqnzfzlq;

--
-- Name: hdb_version; Type: TABLE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE TABLE hdb_catalog.hdb_version (
    version text NOT NULL,
    upgraded_on timestamp with time zone NOT NULL
);


ALTER TABLE hdb_catalog.hdb_version OWNER TO segmipyqnzfzlq;

--
-- Name: remote_schemas; Type: TABLE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE TABLE hdb_catalog.remote_schemas (
    id bigint NOT NULL,
    name text,
    definition json,
    comment text
);


ALTER TABLE hdb_catalog.remote_schemas OWNER TO segmipyqnzfzlq;

--
-- Name: remote_schemas_id_seq; Type: SEQUENCE; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE SEQUENCE hdb_catalog.remote_schemas_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE hdb_catalog.remote_schemas_id_seq OWNER TO segmipyqnzfzlq;

--
-- Name: remote_schemas_id_seq; Type: SEQUENCE OWNED BY; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER SEQUENCE hdb_catalog.remote_schemas_id_seq OWNED BY hdb_catalog.remote_schemas.id;


--
-- Name: band; Type: TABLE; Schema: public; Owner: segmipyqnzfzlq
--

CREATE TABLE public.band (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    name text NOT NULL,
    "viewableByOthers" boolean DEFAULT true NOT NULL,
    "editableByOthers" boolean DEFAULT true NOT NULL
);


ALTER TABLE public.band OWNER TO segmipyqnzfzlq;

--
-- Name: gig; Type: TABLE; Schema: public; Owner: segmipyqnzfzlq
--

CREATE TABLE public.gig (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    venue text DEFAULT 'Leadbone Studios'::text,
    date date DEFAULT now(),
    recorded boolean DEFAULT true NOT NULL,
    band uuid
);


ALTER TABLE public.gig OWNER TO segmipyqnzfzlq;

--
-- Name: performance; Type: TABLE; Schema: public; Owner: segmipyqnzfzlq
--

CREATE TABLE public.performance (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    serial integer DEFAULT 1 NOT NULL,
    stars integer,
    gig uuid NOT NULL,
    song uuid NOT NULL,
    drumkit text,
    key text,
    songkey text
);


ALTER TABLE public.performance OWNER TO segmipyqnzfzlq;

--
-- Name: song; Type: TABLE; Schema: public; Owner: segmipyqnzfzlq
--

CREATE TABLE public.song (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    title text NOT NULL,
    artist text,
    prehistory integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.song OWNER TO segmipyqnzfzlq;

--
-- Name: song_performances; Type: VIEW; Schema: public; Owner: segmipyqnzfzlq
--

CREATE VIEW public.song_performances AS
 SELECT song.id AS song_id,
    song.title,
    song.artist,
    performance.id AS performance_id,
    performance.serial,
    performance.stars,
    performance.songkey,
    performance.drumkit,
    gig.id AS gig_id,
    gig.venue,
    gig.date,
    gig.recorded,
    gig.band
   FROM public.song,
    public.performance,
    public.gig
  WHERE ((performance.song = song.id) AND (performance.gig = gig.id))
  ORDER BY song.title, gig.date DESC;


ALTER TABLE public.song_performances OWNER TO segmipyqnzfzlq;

--
-- Name: song_latest_performance; Type: VIEW; Schema: public; Owner: segmipyqnzfzlq
--

CREATE VIEW public.song_latest_performance AS
 SELECT song_performances.song_id,
    public.first(song_performances.title) AS title,
    public.first(song_performances.artist) AS artist,
    public.first(song_performances.serial) AS serial,
    public.first(song_performances.songkey) AS songkey,
    public.first(song_performances.stars) AS stars,
    public.first(song_performances.drumkit) AS drumkit,
    public.first(song_performances.venue) AS venue,
    public.first(song_performances.recorded) AS recorded,
    public.first(song_performances.performance_id) AS performance_id,
    public.first(song_performances.date) AS latest
   FROM public.song_performances
  GROUP BY song_performances.song_id;


ALTER TABLE public.song_latest_performance OWNER TO segmipyqnzfzlq;

--
-- Name: song_recordings; Type: VIEW; Schema: public; Owner: segmipyqnzfzlq
--

CREATE VIEW public.song_recordings AS
SELECT
    NULL::uuid AS song_id,
    NULL::text AS title,
    NULL::text AS artist,
    NULL::bigint AS recordings;


ALTER TABLE public.song_recordings OWNER TO segmipyqnzfzlq;

--
-- Name: most_recent_performance; Type: VIEW; Schema: public; Owner: segmipyqnzfzlq
--

CREATE VIEW public.most_recent_performance AS
 SELECT song_recordings.song_id,
    song_recordings.artist,
    song_recordings.title,
    song_recordings.recordings,
    song_latest_performance.serial,
    song_latest_performance.stars,
    song_latest_performance.drumkit,
    song_latest_performance.songkey,
    song_latest_performance.latest AS date,
    song_latest_performance.performance_id
   FROM (public.song_recordings
     LEFT JOIN public.song_latest_performance ON ((song_latest_performance.song_id = song_recordings.song_id)))
  ORDER BY song_recordings.title;


ALTER TABLE public.most_recent_performance OWNER TO segmipyqnzfzlq;

--
-- Name: session; Type: TABLE; Schema: public; Owner: segmipyqnzfzlq
--

CREATE TABLE public.session (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    "user" uuid,
    gig uuid
);


ALTER TABLE public.session OWNER TO segmipyqnzfzlq;

--
-- Name: user; Type: TABLE; Schema: public; Owner: segmipyqnzfzlq
--

CREATE TABLE public."user" (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    email text NOT NULL,
    password text DEFAULT 'changeme'::text NOT NULL,
    "fullName" text,
    "stageName" text,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."user" OWNER TO segmipyqnzfzlq;

--
-- Name: user_band; Type: TABLE; Schema: public; Owner: segmipyqnzfzlq
--

CREATE TABLE public.user_band (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    "user" uuid NOT NULL,
    band uuid NOT NULL
);


ALTER TABLE public.user_band OWNER TO segmipyqnzfzlq;

--
-- Name: remote_schemas id; Type: DEFAULT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.remote_schemas ALTER COLUMN id SET DEFAULT nextval('hdb_catalog.remote_schemas_id_seq'::regclass);


--
-- Name: event_invocation_logs event_invocation_logs_pkey; Type: CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.event_invocation_logs
    ADD CONSTRAINT event_invocation_logs_pkey PRIMARY KEY (id);


--
-- Name: event_log event_log_pkey; Type: CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.event_log
    ADD CONSTRAINT event_log_pkey PRIMARY KEY (id);


--
-- Name: event_triggers event_triggers_name_key; Type: CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.event_triggers
    ADD CONSTRAINT event_triggers_name_key UNIQUE (name);


--
-- Name: event_triggers event_triggers_pkey; Type: CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.event_triggers
    ADD CONSTRAINT event_triggers_pkey PRIMARY KEY (id);


--
-- Name: hdb_permission hdb_permission_pkey; Type: CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.hdb_permission
    ADD CONSTRAINT hdb_permission_pkey PRIMARY KEY (table_schema, table_name, role_name, perm_type);


--
-- Name: hdb_query_template hdb_query_template_pkey; Type: CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.hdb_query_template
    ADD CONSTRAINT hdb_query_template_pkey PRIMARY KEY (template_name);


--
-- Name: hdb_relationship hdb_relationship_pkey; Type: CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.hdb_relationship
    ADD CONSTRAINT hdb_relationship_pkey PRIMARY KEY (table_schema, table_name, rel_name);


--
-- Name: hdb_table hdb_table_pkey; Type: CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.hdb_table
    ADD CONSTRAINT hdb_table_pkey PRIMARY KEY (table_schema, table_name);


--
-- Name: remote_schemas remote_schemas_name_key; Type: CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.remote_schemas
    ADD CONSTRAINT remote_schemas_name_key UNIQUE (name);


--
-- Name: remote_schemas remote_schemas_pkey; Type: CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.remote_schemas
    ADD CONSTRAINT remote_schemas_pkey PRIMARY KEY (id);


--
-- Name: band band_name_key; Type: CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.band
    ADD CONSTRAINT band_name_key UNIQUE (name);


--
-- Name: band band_pkey; Type: CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.band
    ADD CONSTRAINT band_pkey PRIMARY KEY (id);


--
-- Name: gig gig_pkey; Type: CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.gig
    ADD CONSTRAINT gig_pkey PRIMARY KEY (id);


--
-- Name: performance performance_pkey; Type: CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.performance
    ADD CONSTRAINT performance_pkey PRIMARY KEY (id);


--
-- Name: session session_pkey; Type: CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.session
    ADD CONSTRAINT session_pkey PRIMARY KEY (id);


--
-- Name: song song_pkey; Type: CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.song
    ADD CONSTRAINT song_pkey PRIMARY KEY (id);


--
-- Name: song song_title_key; Type: CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.song
    ADD CONSTRAINT song_title_key UNIQUE (title);


--
-- Name: user_band user_band_pkey; Type: CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.user_band
    ADD CONSTRAINT user_band_pkey PRIMARY KEY (id);


--
-- Name: user user_email_key; Type: CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_email_key UNIQUE (email);


--
-- Name: user user_pkey; Type: CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_pkey PRIMARY KEY (id);


--
-- Name: event_invocation_logs_event_id_idx; Type: INDEX; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE INDEX event_invocation_logs_event_id_idx ON hdb_catalog.event_invocation_logs USING btree (event_id);


--
-- Name: event_log_trigger_id_idx; Type: INDEX; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE INDEX event_log_trigger_id_idx ON hdb_catalog.event_log USING btree (trigger_id);


--
-- Name: hdb_version_one_row; Type: INDEX; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE UNIQUE INDEX hdb_version_one_row ON hdb_catalog.hdb_version USING btree (((version IS NOT NULL)));


--
-- Name: song_recordings _RETURN; Type: RULE; Schema: public; Owner: segmipyqnzfzlq
--

CREATE OR REPLACE VIEW public.song_recordings AS
 SELECT DISTINCT ON (song.id) song.id AS song_id,
    song.title,
    song.artist,
    (song.prehistory + count(performance.id)) AS recordings
   FROM (public.song
     LEFT JOIN public.performance ON ((performance.song = song.id)))
  GROUP BY song.id
  ORDER BY song.id;


--
-- Name: hdb_table hdb_table_oid_check; Type: TRIGGER; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

CREATE TRIGGER hdb_table_oid_check BEFORE INSERT OR UPDATE ON hdb_catalog.hdb_table FOR EACH ROW EXECUTE PROCEDURE hdb_catalog.hdb_table_oid_check();


--
-- Name: event_invocation_logs event_invocation_logs_event_id_fkey; Type: FK CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.event_invocation_logs
    ADD CONSTRAINT event_invocation_logs_event_id_fkey FOREIGN KEY (event_id) REFERENCES hdb_catalog.event_log(id);


--
-- Name: hdb_permission hdb_permission_table_schema_fkey; Type: FK CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.hdb_permission
    ADD CONSTRAINT hdb_permission_table_schema_fkey FOREIGN KEY (table_schema, table_name) REFERENCES hdb_catalog.hdb_table(table_schema, table_name);


--
-- Name: hdb_relationship hdb_relationship_table_schema_fkey; Type: FK CONSTRAINT; Schema: hdb_catalog; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY hdb_catalog.hdb_relationship
    ADD CONSTRAINT hdb_relationship_table_schema_fkey FOREIGN KEY (table_schema, table_name) REFERENCES hdb_catalog.hdb_table(table_schema, table_name);


--
-- Name: gig gig_band_fkey; Type: FK CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.gig
    ADD CONSTRAINT gig_band_fkey FOREIGN KEY (band) REFERENCES public.band(id);


--
-- Name: performance performance_gig_fkey; Type: FK CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.performance
    ADD CONSTRAINT performance_gig_fkey FOREIGN KEY (gig) REFERENCES public.gig(id);


--
-- Name: performance performance_song_fkey; Type: FK CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.performance
    ADD CONSTRAINT performance_song_fkey FOREIGN KEY (song) REFERENCES public.song(id);


--
-- Name: session session_gig_fkey; Type: FK CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.session
    ADD CONSTRAINT session_gig_fkey FOREIGN KEY (gig) REFERENCES public.gig(id);


--
-- Name: session session_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.session
    ADD CONSTRAINT session_user_fkey FOREIGN KEY ("user") REFERENCES public."user"(id);


--
-- Name: user_band user_band_band_fkey; Type: FK CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.user_band
    ADD CONSTRAINT user_band_band_fkey FOREIGN KEY (band) REFERENCES public.band(id);


--
-- Name: user_band user_band_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: segmipyqnzfzlq
--

ALTER TABLE ONLY public.user_band
    ADD CONSTRAINT user_band_user_fkey FOREIGN KEY ("user") REFERENCES public."user"(id);


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: segmipyqnzfzlq
--

REVOKE ALL ON SCHEMA public FROM postgres;
REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO segmipyqnzfzlq;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: LANGUAGE plpgsql; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON LANGUAGE plpgsql TO segmipyqnzfzlq;


--
-- PostgreSQL database dump complete
--

